(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;

(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
  (* the type of environments *)
  type env
  (* the type of values stored in environments *)
  type value =
  | Val of expr
  | Closure of (expr * env)

  (* empty () -- Returns an empty environment *)
  val empty : unit -> env

  (* close expr env -- Returns a closure for `expr` and its `env` *)
  val close : expr -> env -> value

  (* lookup env varid -- Returns the value in the `env` for the
      `varid`, raising an `Eval_error` if not found *)
  val lookup : env -> varid -> value

  (* extend env varid loc -- Returns a new environment just like
      `env` except that it maps the variable `varid` to the `value`
      stored at `loc`. This allows later changing the value, an
      ability used in the evaluation of `letrec`. To make good on
      this, extending an environment needs to preserve the previous
      bindings in a physical, not just structural, way. *)
  val extend : env -> varid -> value ref -> env

  (* env_to_string env -- Returns a printable string representation
      of environment `env` *)
  val env_to_string : env -> string
                              
  (* value_to_string ?printenvp value -- Returns a printable string
      representation of a value; the optional flag `printenvp`
      (default: `true`) determines whether to include the environment
      in the string representation when called on a closure *)
  val value_to_string : ?printenvp:bool -> value -> string
end 

module Env : ENV = 
 struct 
    type env = (varid * value ref) list
      and value =
        | Val of expr
        | Closure of (expr * env)

    let empty () : env = []

    let close (exp : expr) (env : env) : value =
      Closure (exp, env)

    let lookup (env : env) (varname : varid) : value =
      if List.mem_assoc varname env then 
        !(List.assoc varname env)
      else 
        raise (EvalError "variable not found in environment")

    let extend (env : env) (varname : varid) (loc : value ref) : env =
      (varname, loc) :: (List.remove_assoc varname env)

    let rec env_to_string (env : env) : string =
      let sorted_env = List.sort (fun (x, _) (y, _) -> 
                                    String.compare x y) env in
      let var_to_vals = 
        List.fold_left (fun acc (x, val_ref) -> 
                          acc ^ (x ^ "↦" ^ (value_to_string !val_ref)) ^ "; ")
                        ""
                        sorted_env in
      "{" ^ var_to_vals ^ "}"

    and value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with 
      | Val exp -> Expr.exp_to_concrete_string exp 
      | Closure (exp, env) -> 
          let exp_str = Expr.exp_to_concrete_string exp in
          if printenvp then 
            "[" ^ env_to_string env ^ "⊢" ^ exp_str ^ "]"
          else 
            exp_str
 end 
;;

(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;
  
(* Helper to check if two expressions are of the same type *)  
let are_compatible_types (e1 : expr) (e2 : expr) : bool =
  match (e1, e2) with
  | (Num _, Num _) | (Bool _, Bool _) | (Float _, Float _)
  | (String _, String _) | (List _, List _) | (Fun _, Fun _) -> true
  | _ -> false
;;

(* Helper to check if all elements in a list are of the same type *)  
let check_list_type (lst : expr list) : bool =
  match lst with
  | [] -> true
  | h :: t ->
      let rec is_same_type head_type = function
        | [] -> true
        | x :: xs -> are_compatible_types head_type x && 
                     is_same_type head_type xs
      in
      is_same_type h t
;;

(* Helper to evaluate binary operations (used in eval_s, eval_d, eval_l *)
let eval_binop (eval_fn : expr -> Env.env -> Env.value) 
               (binop : binop) 
               (expr1 : expr) 
               (expr2 : expr) 
               (env : Env.env) : Env.value =
  let val1 = eval_fn expr1 env in
  let val2 = eval_fn expr2 env in
  match (val1, val2) with
  | (Env.Val Num x, Env.Val Num y) ->
    (match binop with
    | Plus -> Env.Val (Num (x + y))
    | Minus -> Env.Val (Num (x - y))
    | Times -> Env.Val (Num (x * y))
    | Divide -> if y = 0 then raise (EvalError "Division by zero") 
                 else Env.Val (Num (x / y))
    | Equals -> Env.Val (Bool (x = y))
    | NotEquals -> Env.Val (Bool (x <> y))
    | LessThan -> Env.Val (Bool (x < y))
    | GreaterThan -> Env.Val (Bool (x > y))
    | _ -> raise (EvalError "unsupported operation on int"))
  | (Env.Val Float x, Env.Val Float y) ->
    (match binop with
    | Plus -> Env.Val (Float (x +. y))
    | Minus -> Env.Val (Float (x -. y))
    | Times -> Env.Val (Float (x *. y))
    | Divide -> if y = 0.0 then raise (EvalError "Division by zero") 
                 else Env.Val (Float (x /. y))
    | Equals -> Env.Val (Bool (x = y))
    | NotEquals -> Env.Val (Bool (x <> y))
    | LessThan -> Env.Val (Bool (x < y))
    | GreaterThan -> Env.Val (Bool (x > y))
    | Power -> Env.Val (Float (x ** y))
    | _ -> raise (EvalError "unsupported operation on float"))
  | (Env.Val Bool b1, Env.Val Bool b2) ->
    (match binop with
    | Equals -> Env.Val (Bool (b1 = b2))
    | NotEquals -> Env.Val (Bool (b1 <> b2))
    | _ -> raise (EvalError "boolean operation on non-equality"))
  | (Env.Val String s1, Env.Val String s2) ->
    (match binop with
    | Concat -> Env.Val (String (s1 ^ s2))
    | Equals -> Env.Val (Bool (s1 = s2))
    | NotEquals -> Env.Val (Bool (s1 <> s2))
    | LessThan -> Env.Val (Bool (s1 < s2))
    | GreaterThan -> Env.Val (Bool (s1 > s2))
    | _ -> raise (EvalError "string operation on non-concat"))
  | (Env.Val v1, Env.Val (List l)) when binop = ListCons ->
      if List.for_all (are_compatible_types v1) l then
        Env.Val (List (v1 :: l))
      else
        raise (EvalError 
                "Type mismatch in ListCons: elements must be of the same type")
  | (Env.Val (List l1), Env.Val (List l2)) ->
      (match binop with
      | Equals -> Env.Val (Bool (l1 = l2))
      | NotEquals -> Env.Val (Bool (l1 <> l2))
      | LessThan -> Env.Val (Bool (l1 < l2))
      | GreaterThan -> Env.Val (Bool (l1 > l2))
      | ListAppend -> 
        if check_list_type l1 && check_list_type l2 && (l1 = [] || l2 = [] 
                       || are_compatible_types (List.hd l1) (List.hd l2)) then
          Env.Val (List (l1 @ l2))
        else
          raise (EvalError 
          "Type mismatch in ListAppend: lists must have same type elements")
      | _ -> raise (EvalError "Unsupported operation on lists"))
  | (Env.Val v1, Env.Val (List [])) when binop = ListCons ->
      Env.Val (List [v1])  
  | _ -> raise (EvalError "binop on non-compatible types")
;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)
let rec eval_s (exp : expr) (_env : Env.env) : Env.value =
  let extract_expr (expr : expr) : expr = 
    match eval_s expr _env with 
    | Env.Val exp -> exp 
    | Env.Closure _ -> raise (EvalError "closure in substitution evaluation")
  in
  match exp with 
  | Num _ | Bool _ | Fun _ | Float _ | String _ -> Env.Val exp 
  | Var _ -> raise (EvalError "evaluation of unbound variable")  
  | Raise -> raise EvalException                
  | Unop (_, expr) -> (match extract_expr expr with 
                         | Num x -> Env.Val (Num (~- x))            
                         | _ -> raise (EvalError "unop on non-integer"))
  | Binop (binop, expr1, expr2) -> eval_binop eval_s binop expr1 expr2 _env
  | Conditional (expr1, expr2, expr3) -> 
      (match eval_s expr1 _env with
      | Env.Val Bool b -> if b then eval_s expr2 _env else eval_s expr3 _env 
      | _ -> raise (EvalError "non-boolean in conditional"))
  (* -------------LIST EXTENSION--------------- *)
  | List exprs ->
    let evaluated_list = List.map (fun e -> 
                                      match eval_s e _env with
                                      | Env.Val v -> v
                                      | _ -> raise 
                                      (EvalError "Invalid list expression")) 
                                                                    exprs in
    if check_list_type evaluated_list then
      Env.Val (List evaluated_list)
    else
      raise 
      (EvalError "Type mismatch: all elements in the list must have same type")
  (* ----------------------------------------- *)
  | Let (x, expr1, expr2) -> eval_s (subst x (extract_expr expr1) expr2) _env
  | Letrec (x, expr1, expr2) -> 
      let vd = extract_expr expr1 in 
      eval_s 
        (subst x 
               (extract_expr (subst x (Letrec (x, vd, Var x)) vd)) 
               expr2)
        _env 
  | Unassigned -> raise (EvalError "unassigned cannot be evaluated")
  | App (expr1, expr2) -> 
      match eval_s expr1 _env  with 
      | Env.Val Fun (x, b) -> eval_s (subst x (extract_expr expr2) b) _env
      | _ -> raise (EvalError "function application on non-function") ;;


type envspec = | Dynamic | Lexical ;;

(* Environment evaluators: use eval_envir helper *)
let rec eval_env (exp : expr) 
                   (env : Env.env) 
                   (env_type : envspec) 
                   : Env.value  =
  let extract_expr (expr : expr) (envir : Env.env) (env_type : envspec) : expr = 
    match eval_env expr envir env_type with 
    | Env.Val exp -> exp 
    | Env.Closure (_, _) -> raise (EvalError "closure not expected")
  in
  match exp with 
  | Num _ | Bool _ | Float _ | String _ -> Env.Val exp  
  | Fun _ -> 
    (match env_type with 
    | Dynamic -> Env.Val exp
    | Lexical -> Env.close exp env)
  | Raise -> raise EvalException                
  | Var x -> Env.lookup env x               
  | Unop (_, expr) -> (match extract_expr expr env env_type with 
                         | Num x -> Env.Val (Num (~- x))
                         | Float x -> Env.Val (Float (~-. x))
                         | _ -> raise (EvalError "unop on non-integer"))
  | Binop (binop, expr1, expr2) -> 
                         eval_binop (fun expr env -> eval_env expr env env_type) 
                         binop expr1 expr2 env
  | Conditional (expr1, expr2, expr3) -> 
      (match eval_env expr1 env env_type with
      | Env.Val Bool b -> if b then eval_env expr2 env env_type 
                          else eval_env expr3 env env_type
      | _ -> raise (EvalError "non-boolean in conditional"))
  (* ---LIST EXTENSION--------------- *)
  | List exprs ->
    let evaluated_list = List.map (fun e -> 
                                    match eval_env e env env_type with
                                    | Env.Val v -> v
                                    | _ -> raise 
                                          (EvalError "Invalid list expression")) 
                                                                        exprs in
    if check_list_type evaluated_list then
      Env.Val (List evaluated_list)
    else
      raise 
      (EvalError "Type mismatch: all elements in the list must have same type")
  (*-----------------------------------*)
  | Let (x, expr1, expr2) -> 
      eval_env expr2 (Env.extend env x (ref (eval_env expr1 env env_type))) 
                                                                  env_type
  | Letrec (x, expr1, expr2) ->
      (match env_type with 
      | Dynamic -> 
        eval_env expr2 (Env.extend env x (ref (eval_env expr1 env env_type))) 
                                                                   env_type
      | Lexical -> 
        let temp = ref (Env.Val Unassigned) in 
        temp := eval_env expr1 (Env.extend env x temp) env_type; 
        eval_env expr2 (Env.extend env x temp) env_type)
  | Unassigned -> raise (EvalError "unassigned cannot be evaluated")
  | App (expr1, expr2) ->  
      (match env_type with 
      | Dynamic -> 
        (match eval_env expr1 env env_type with 
        | Env.Val Fun (x, b) -> 
          eval_env b (Env.extend env x (ref (eval_env expr2 env env_type))) 
                                                                  env_type
        | _ -> raise (EvalError "function application on non-function"))
      | Lexical -> 
        match eval_env expr1 env env_type with 
        | Env.Closure (Fun (x, b), env_l) -> 
            eval_env b 
                       (Env.extend env_l x (ref (eval_env expr2 env env_type))) 
                       env_type
        | _ -> raise (EvalError "function application on non-function"));;  

(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)
let eval_d (exp : expr) (env : Env.env) : Env.value =
  eval_env exp env Dynamic ;;
       
(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
let eval_l (exp : expr) (env : Env.env) : Env.value =
  eval_env exp env Lexical ;;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate = eval_d ;;
